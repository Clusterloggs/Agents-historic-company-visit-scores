knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Agents_historic_data <- read_excel(r"C:\Users\Kintonde\Desktop\Byblos\banford\hmd\Agents historic company visit scores.xlsx",
library(readxl)
Agents_historic_data <- read_excel("C:/Users/Kintonde/Desktop/Byblos/banford/hmd/Agents historic company visit scores.xlsx",
sheet = "DATASET")
head(Agents_historic_data)
# Calculate the total number of columns
total_column <- ncol(Agents_historic_data)
total_row <- nrow(Agents_historic_data)
print("total number of columns:")
print(total_column)
print("total number of rows:")
print(total_row)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Agents_historic_data <- read_excel("C:/Users/Kintonde/Desktop/Byblos/banford/hmd/Agents historic company visit scores.xlsx",
sheet = "DATASET")
head(Agents_historic_data)
# Calculate the total number of columns
total_column <- ncol(Agents_historic_data)
total_row <- nrow(Agents_historic_data)
print("total number of columns:")
print(total_column)
print("total number of rows:")
print(total_row)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
Agents_historic_data <- read_excel("C:/Users/Kintonde/Desktop/Byblos/banford/hmd/Agents historic company visit scores.xlsx",
sheet = "DATASET")
head(Agents_historic_data)
# Calculate the total number of columns
total_column <- ncol(Agents_historic_data)
total_row <- nrow(Agents_historic_data)
print("total number of columns:")
print(total_column)
print("total number of rows:")
print(total_row)
str(Agents_historic_data)
positive_score <- subset(Agents_historic_data, EmploymentScore >= 0 & InvestmentScore >= 0 )
head(positive_score)
str(positive_score)
# change the Sector column name to category
library(dplyr) # load dplyr library for data manipulation
positive_score <- positive_score %>%
rename(Category = Sector)
# inspect the 'positive_score' dataframe to verified
str(positive_score)
# Assign SIC codes based on category
positive_score$Potential_SICs <- sapply(positive_score$Category, function(category) {
# Define SIC codes based on category
switch(
category,
"Production" = "A, B, C, D, E, F",
"Business and financial services" = "K, L, M, N",
"Transport, storage and communications" = "H, J",
"Distribution, hotels, catering, arts, entertainment, recreation and other services" = "G, I, R, S",
"Unknown"
)
})
# check the dataset structure
str(positive_score)
# we need to extract the year to another column for easy computation
positive_score <- positive_score %>%
mutate(year = substr(ActualDateDisplay, nchar(ActualDateDisplay) - 3, nchar(ActualDateDisplay)))
# Print the data structure
str(positive_score)
# Aggregate data to calculate average scores by Category and Year using dplyr
aggregate_score <- positive_score %>%
group_by(Category, year) %>% summarise(
average_DemandScore = mean(DemandScore, na.rm = TRUE),
average_ExportScore = mean(ExportScore, na.rm = TRUE))
# Print the aggregated dataset
str(aggregate_score)
# load the library
library(ggplot2)
# Create line chart for Average Demand Score
ggplot(data = aggregate_score, aes(x = year, y = average_DemandScore, color = Category, group = Category)) +
geom_line() +
labs(title = "Average Demand Score Over Time by Sector", x = "Year", y = "Average Demand Score") +
theme_minimal()
# load the library
library(ggplot2)
# Create line chart for Average Demand Score
ggplot(data = aggregate_score, aes(x = year, y = average_DemandScore, color = Category, group = Category)) +
geom_line() +
labs(title = "Average Demand Score Over Time by Sector", x = "Year", y = "Average Demand Score") +
theme_minimal()
# Create line chart for average_ExportScore
ggplot(data = aggregate_score, aes(x = year, y = average_ExportScore, color = Category, group = Category)) +
geom_line() +
labs(title = "Average Export Score Over Time by Sector", x = "Year", y = "Average Export Score") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(readxl)
library(ggplot2)
# Set directories
data_dir <- "C:/Users/USER/Desktop/paschaline"
setwd(data_dir)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(readxl)
library(ggplot2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores"
setwd(data_dir)
# dataset to be use
dataset <- "C:/Users/Kintonde/Desktop/Byblos/banford/hmd/Agents historic company visit scores.xlsx"
# Load the dataset into R Studio Environment
df <- read_excel(file.path(data_dir, dataset), sheet = 2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores"
setwd(data_dir)
# dataset to be use
dataset <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores/Agents historic company visit scores.xlsx"
# Load the dataset into R Studio Environment
df <- read_excel(file.path(data_dir, dataset), sheet = 2)
# dataset to be use
dataset <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores/Agents historic company visit scores.xlsx"
# Load the dataset into R Studio Environment
df <- read_excel(file.path(data_dir, dataset), sheet = 2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores"
setwd(data_dir)
# dataset to be use
dataset <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores/Agents historic company visit scores.xlsx"
# Load the dataset into R Studio Environment
df <- read_excel(file.path(data_dir, dataset), sheet = 2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE"
setwd(data_dir)
# dataset to be use
dataset <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores/Agents historic company visit scores.xlsx"
# Load the dataset into R Studio Environment
df <- read_excel(file.path(data_dir, dataset), sheet = 2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents"
setwd(data_dir)
# dataset to be use
dataset <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores/Agents historic company visit scores.xlsx"
# Load the dataset into R Studio Environment
df <- read_excel(file.path(data_dir, dataset), sheet = 2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores"
setwd(data_dir)
# dataset to be use
dataset <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores/Agents historic company visit scores.xlsx"
# Load the dataset into R Studio Environment
df <- read_excel(file.path(data_dir, dataset), sheet = 2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores"
setwd(data_dir)
# dataset to be use
library(readxl)
df <- read_excel("C:/Users/Kintonde/Desktop/Byblos/banford/hmd/Agents historic company visit scores.xlsx",
sheet = "DATASET")
head(Agents_historic_data)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(readxl)
library(ggplot2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores"
setwd(data_dir)
# dataset to be use
library(readxl)
df <- read_excel("C:/Users/Kintonde/Desktop/Byblos/banford/hmd/Agents historic company visit scores.xlsx",
sheet = "DATASET")
head(Agents_historic_data)
# calculate the total number of columns
num_columns <- ncol(df)
# calculate the total number of Observations
num_observations <- nrow(df)
cat("There are",
num_columns,
"columns and",
num_observations,
"observations.\n")
# Check the datset structure
str(df)
# Print the head of the dataset
head(df)
# Filter companies with positive Investment and Employment Scores
comp_positive_score <-
subset(df, InvestmentScore > 0 & EmploymentScore > 0)
# calculate the total number of columns
fil_columns <- ncol(comp_positive_score)
# calculate the total number of Observations
fil_observations <- nrow(comp_positive_score)
cat("There are",
fil_columns,
"columns and",
fil_observations,
"observations after Filtering the positive Investment and Employment Scores.\n")
# rename the Sector column to Category
colnames(comp_positive_score)[colnames(comp_positive_score) == "Sector"] <-
"Category"
# print the data structure
str(comp_positive_score)
# Function to map categories to SIC codes
SIC <- function(category) {
switch(
category,
"Production" = "A, B, C, D, E, F",
"Business and financial services" = "K, L, M, N",
"Transport, storage and communications" = "H, J",
"Distribution, hotels, catering, arts, entertainment, recreation and other services" = "G, I, R, S",
"Unknown"
)}
# Create 'Potential_SICs' column based on SIC codes using the using the respective category
comp_positive_score$Potential_SICs <-
sapply(comp_positive_score$Category, SIC)
# print the data structure
str(comp_positive_score)
# Extract year from 'ActualDateDisplay' and create 'Year' column
comp_positive_score$Year <- substr(
comp_positive_score$ActualDateDisplay,
nchar(comp_positive_score$ActualDateDisplay) - 3,
nchar(comp_positive_score$ActualDateDisplay))
# print the data structure
str(comp_positive_score)
# Aggregate data to calculate average scores by Category and Year
Avg_score <- aggregate(
cbind(
Avg_InvestmentScore = InvestmentScore,
Avg_EmploymentScore = EmploymentScore
) ~ Category
+ Year,
data = comp_positive_score,
FUN = mean,
na.rm = TRUE)
# print the aggregated dataset
head(Avg_score)
# calculate the total number of columns in the Aggregated Avg_Score dataset
fil_columns <- ncol(Avg_score)
# calculate the total number of Observations
fil_observations <- nrow(Avg_score)
cat("There are",
fil_columns,
"columns and",
fil_observations,
"observations in the Avg_score dataset.\n")
# print the dataset stucture
str(Avg_score)
# Create heatmap for Average Investment Score
ggplot(data = Avg_score, aes(x = Year, y = Category,
fill = Avg_InvestmentScore)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightyellow",# set lightyellow for the low values
high = "darkgreen", # set darkgreen fro the high values
name = "Average Investment Score") +
labs(title = "Average Investment Score by Sector and Year",
x = "Year", y = "Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Adjust size as desired
axis.text.y = element_text(size = 12),  # Adjust size as desired
legend.position = "right")
# Create heatmap for Average Employment Score
ggplot(data = Avg_score, aes(x = Year, y = Category, fill = Avg_EmploymentScore)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightyellow",# set lightyellow for the low values
high = "darkgreen",  # set darkgreen fro the high values
name = "Average Employment Score") +
labs(title = "Average Employment Score by Sector and Year",
x = "Year", y = "Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Adjust size as desired
axis.text.y = element_text(size = 12),  # Adjust size as desired
legend.position = "right")
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores"
setwd(data_dir)
# dataset to be use
library(readxl)
df <- read_excel("C:/Users/Kintonde/Desktop/Byblos/banford/hmd/Agents historic company visit scores.xlsx",
sheet = "DATASET")
head(Agents_historic_data)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(readxl)
library(ggplot2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores"
setwd(data_dir)
# dataset to be use
library(readxl)
df <- read_excel("C:/Users/Kintonde/Desktop/Byblos/banford/hmd/Agents historic company visit scores.xlsx",
sheet = "DATASET")
head(Agents_historic_data)
# calculate the total number of columns
num_columns <- ncol(df)
# calculate the total number of Observations
num_observations <- nrow(df)
cat("There are",
num_columns,
"columns and",
num_observations,
"observations.\n")
# Check the datset structure
str(df)
# Print the head of the dataset
head(df)
# Filter companies with positive Investment and Employment Scores
comp_positive_score <-
subset(df, InvestmentScore > 0 & EmploymentScore > 0)
# calculate the total number of columns
fil_columns <- ncol(comp_positive_score)
# calculate the total number of Observations
fil_observations <- nrow(comp_positive_score)
cat("There are",
fil_columns,
"columns and",
fil_observations,
"observations after Filtering the positive Investment and Employment Scores.\n")
# rename the Sector column to Category
colnames(comp_positive_score)[colnames(comp_positive_score) == "Sector"] <-
"Category"
# print the data structure
str(comp_positive_score)
# Function to map categories to SIC codes
SIC <- function(category) {
switch(
category,
"Production" = "A, B, C, D, E, F",
"Business and financial services" = "K, L, M, N",
"Transport, storage and communications" = "H, J",
"Distribution, hotels, catering, arts, entertainment, recreation and other services" = "G, I, R, S",
"Unknown"
)}
# Create 'Potential_SICs' column based on SIC codes using the using the respective category
comp_positive_score$Potential_SICs <-
sapply(comp_positive_score$Category, SIC)
# print the data structure
str(comp_positive_score)
# Extract year from 'ActualDateDisplay' and create 'Year' column
comp_positive_score$Year <- substr(
comp_positive_score$ActualDateDisplay,
nchar(comp_positive_score$ActualDateDisplay) - 3,
nchar(comp_positive_score$ActualDateDisplay))
# print the data structure
str(comp_positive_score)
# Aggregate data to calculate average scores by Category and Year
Avg_score <- aggregate(
cbind(
Avg_InvestmentScore = InvestmentScore,
Avg_EmploymentScore = EmploymentScore
) ~ Category
+ Year,
data = comp_positive_score,
FUN = mean,
na.rm = TRUE)
# print the aggregated dataset
head(Avg_score)
# calculate the total number of columns in the Aggregated Avg_Score dataset
fil_columns <- ncol(Avg_score)
# calculate the total number of Observations
fil_observations <- nrow(Avg_score)
cat("There are",
fil_columns,
"columns and",
fil_observations,
"observations in the Avg_score dataset.\n")
# print the dataset stucture
str(Avg_score)
# Create heatmap for Average Investment Score
ggplot(data = Avg_score, aes(x = Year, y = Category,
fill = Avg_InvestmentScore)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightyellow",# set lightyellow for the low values
high = "darkgreen", # set darkgreen fro the high values
name = "Average Investment Score") +
labs(title = "Average Investment Score by Sector and Year",
x = "Year", y = "Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Adjust size as desired
axis.text.y = element_text(size = 12),  # Adjust size as desired
legend.position = "right")
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(readxl)
library(ggplot2)
# Set directories
data_dir <- "C:/Users/Kintonde/Documents/VSCODE/Agents-historic-company-visit-scores"
setwd(data_dir)
# dataset to be use
library(readxl)
df <- read_excel("C:/Users/Kintonde/Desktop/Byblos/banford/hmd/Agents historic company visit scores.xlsx",
sheet = "DATASET")
head(Agents_historic_data)
# calculate the total number of columns
num_columns <- ncol(df)
# calculate the total number of Observations
num_observations <- nrow(df)
cat("There are",
num_columns,
"columns and",
num_observations,
"observations.\n")
# Check the datset structure
str(df)
# Print the head of the dataset
head(df)
# Filter companies with positive Investment and Employment Scores
comp_positive_score <-
subset(df, InvestmentScore > 0 & EmploymentScore > 0)
# calculate the total number of columns
fil_columns <- ncol(comp_positive_score)
# calculate the total number of Observations
fil_observations <- nrow(comp_positive_score)
cat("There are",
fil_columns,
"columns and",
fil_observations,
"observations after Filtering the positive Investment and Employment Scores.\n")
# rename the Sector column to Category
colnames(comp_positive_score)[colnames(comp_positive_score) == "Sector"] <-
"Category"
# print the data structure
str(comp_positive_score)
# Function to map categories to SIC codes
SIC <- function(category) {
switch(
category,
"Production" = "A, B, C, D, E, F",
"Business and financial services" = "K, L, M, N",
"Transport, storage and communications" = "H, J",
"Distribution, hotels, catering, arts, entertainment, recreation and other services" = "G, I, R, S",
"Unknown"
)}
# Create 'Potential_SICs' column based on SIC codes using the using the respective category
comp_positive_score$Potential_SICs <-
sapply(comp_positive_score$Category, SIC)
# print the data structure
str(comp_positive_score)
# Extract year from 'ActualDateDisplay' and create 'Year' column
comp_positive_score$Year <- substr(
comp_positive_score$ActualDateDisplay,
nchar(comp_positive_score$ActualDateDisplay) - 3,
nchar(comp_positive_score$ActualDateDisplay))
# print the data structure
str(comp_positive_score)
# Aggregate data to calculate average scores by Category and Year
Avg_score <- aggregate(
cbind(
Avg_InvestmentScore = InvestmentScore,
Avg_EmploymentScore = EmploymentScore
) ~ Category
+ Year,
data = comp_positive_score,
FUN = mean,
na.rm = TRUE)
# print the aggregated dataset
head(Avg_score)
# calculate the total number of columns in the Aggregated Avg_Score dataset
fil_columns <- ncol(Avg_score)
# calculate the total number of Observations
fil_observations <- nrow(Avg_score)
cat("There are",
fil_columns,
"columns and",
fil_observations,
"observations in the Avg_score dataset.\n")
# print the dataset stucture
str(Avg_score)
# Create heatmap for Average Investment Score
ggplot(data = Avg_score, aes(x = Year, y = Category,
fill = Avg_InvestmentScore)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightyellow",# set lightyellow for the low values
high = "darkgreen", # set darkgreen fro the high values
name = "Average Investment Score") +
labs(title = "Average Investment Score by Sector and Year",
x = "Year", y = "Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Adjust size as desired
axis.text.y = element_text(size = 12),  # Adjust size as desired
legend.position = "right")
# Create heatmap for Average Employment Score
ggplot(data = Avg_score, aes(x = Year, y = Category, fill = Avg_EmploymentScore)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "lightyellow",# set lightyellow for the low values
high = "darkgreen",  # set darkgreen fro the high values
name = "Average Employment Score") +
labs(title = "Average Employment Score by Sector and Year",
x = "Year", y = "Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 14),  # Adjust size as desired
axis.text.y = element_text(size = 12),  # Adjust size as desired
legend.position = "right")
